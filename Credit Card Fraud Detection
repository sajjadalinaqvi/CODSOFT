import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
credit_car_data = pd.read_csv(r'Dataset/creditcard.csv')
credit_car_data
credit_car_data.info()
credit_car_data['Class'].value_counts()

legit = credit_car_data[credit_car_data.Class == 0]
fraud = credit_car_data[credit_car_data.Class == 1]
print(legit.shape)
print(fraud.shape)
legit.Amount.describe()
fraud.Amount.describe()
credit_car_data.groupby('Class').mean()


#UNDERSAMPLING
legit_sample = legit.sample(n=492)
new_dataset = pd.concat([legit_sample, fraud], axis = 0)
new_dataset.head()
new_dataset.tail()
new_dataset['Class'].value_counts()
new_dataset.groupby('Class').mean()


X=new_dataset.drop(columns = 'Class',axis = 1)
Y= new_dataset['Class']
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size = 0.2, stratify = Y, random_state =2 )
#print(X.shape,X_train.shape, X_test.shape)

model=LogisticRegression()
model.fit(X_train, Y_train)

#Accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy on Training Data: ', training_data_accuracy)

#Accuracy on Testing data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy on Testing Data: ', test_data_accuracy)



from sklearn.metrics import precision_score, recall_score, f1_score

# Precision
precision = precision_score(Y_test, X_test_prediction)

# Recall
recall = recall_score(Y_test, X_test_prediction)

# F1-score
f1 = f1_score(Y_test, X_test_prediction)

print('Precision:', precision)
print('Recall:', recall)
print('F1-score:', f1)
